{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Gasto.js","components/Listado.js","helpers.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","on","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCrearGasto","nombre","guardarNombre","trim","gasto","id","shortid","generate","console","log","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarpregunta","guardarGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.78410ce9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({mensaje}) => (\r\n<p className=\"alert alert-danger error\">{mensaje}</p>\r\n)\r\nError.propTypes = {\r\n    gmensaje: PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, { Fragment, useState } from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Pregunta = ({guardarPresupuesto, guardarRestante, actualizarPregunta}) => {\r\n\r\n    //Definir el state\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, guardarError] = useState(false);\r\n\r\n    //funcion que le el presupuesto\r\n    const definirPresupuesto = e =>{\r\n        guardarCantidad(parseInt(e.target.value))\r\n    }\r\n\r\n    //Submit para definir el presupuesto\r\n    const agregarPresupuesto = e => {\r\n        e.preventDefault();\r\n\r\n        //validamos\r\n        if(cantidad < 1 || isNaN( cantidad ) ) {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        // Si pasa la validacion\r\n        guardarError(false);\r\n        guardarPresupuesto(cantidad);\r\n        guardarRestante(cantidad);\r\n        actualizarPregunta(false);\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Coloca tu presupuesto</h2>\r\n            { error ? <Error mensaje=\"El presupuesto debe ser mayor a 0\" /> : null}\r\n            <form\r\n                onSubmit={agregarPresupuesto}\r\n            >\r\n                <input \r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Coloca tu presupuesto\"  \r\n                    on onChange={definirPresupuesto}          \r\n                />\r\n                <input \r\n                type=\"submit\"\r\n                className=\"button-primary u-full-width\" \r\n                value=\"Definir Presupuesto\"           \r\n                />\r\n            </form>\r\n        </Fragment>\r\n        \r\n     );\r\n}\r\n\r\nPregunta.propTypes = {\r\n    guardarPresupuesto: PropTypes.func.isRequired,\r\n    guardarRestante: PropTypes.func.isRequired,\r\n    actualizarPregunta: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Pregunta;","import React, { useState }from 'react';\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({guardarGasto, guardarCrearGasto}) => {\r\n\r\n    const [nombre, guardarNombre] = useState('');\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, guardarError] = useState(false);\r\n    \r\n\r\n\r\n    //Cuando el usuario agrega el gasto\r\n    const agregarGasto = e => {\r\n        e.preventDefault();\r\n\r\n        //validar\r\n        if(cantidad < 1 || isNaN(cantidad) || nombre.trim() === ''){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        //si pasa la validacion\r\n        guardarError(false);\r\n\r\n        //Construir el gasto\r\n        const gasto = {\r\n            nombre,\r\n            cantidad,\r\n            id: shortid.generate()\r\n        }\r\n\r\n        console.log(gasto);\r\n\r\n        //pasar el gasto al componente principal\r\n        guardarGasto(gasto);\r\n        guardarCrearGasto(true);\r\n\r\n        //resetear el form\r\n        guardarNombre('');\r\n        guardarCantidad(0);\r\n    }\r\n    return ( \r\n\r\n        <form\r\n            onSubmit={agregarGasto}\r\n        >\r\n            <h2>Agrega tus gastos ac√°</h2>\r\n            { error ? <Error mensaje=\"Ambos campos son obligatorios o el presupuesto es incorrecto.\"\r\n                    /> : null}\r\n            <div className=\"campo\">\r\n                <label>Nombre del gasto</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. Almuerzo\"\r\n                    value={nombre}\r\n                    onChange={e => guardarNombre(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"campo\">\r\n                <label>Cantidad del gasto</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. 300$\"\r\n                    value={cantidad}\r\n                    onChange={e => guardarCantidad(parseInt(e.target.value))}\r\n                />\r\n            </div>\r\n\r\n            <input\r\n                type=\"submit\"\r\n                className=\"button-primary u-full-widht\"\r\n                value=\"Agregar gasto\"\r\n            />\r\n        </form>\r\n     );\r\n}\r\n \r\nFormulario.propTypes = {\r\n    guardarGasto: PropTypes.func.isRequired,\r\n    guardarCrearGasto: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Gasto = ({gasto}) => (\r\n\r\n    <li className=\"gastos\">\r\n        <p>\r\n            {gasto.nombre}\r\n            <spam className=\"gasto\">${gasto.cantidad}</spam>\r\n        </p>\r\n    </li>\r\n);\r\nGasto.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\nexport default Gasto;","import React from 'react';\r\nimport Gasto from './Gasto';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Listado = ({gastos}) => (\r\n    <div className=\"gastos-realizados\">\r\n        <h2>Listado de gastos</h2>\r\n        {gastos.map(gasto => (\r\n\r\n            <Gasto \r\n                key={gasto.id}\r\n                gasto={gasto}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nListado.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}\r\n \r\nexport default Listado;","export const revisarPresupuesto = (presupuesto, restante) => {\r\n    let clase;\r\n\r\n    if( (presupuesto / 4) > restante) {\r\n        clase = 'alert alert-danger';\r\n    } else if ((presupuesto / 2) > restante) {\r\n        clase = 'alert alert-warning';\r\n    } else {\r\n        clase = 'alert alert-success';\r\n    }\r\n\r\n    return clase;\r\n}","import React,{ Fragment } from 'react';\r\nimport { revisarPresupuesto } from '../helpers';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ControlPresupuesto = ({presupuesto, restante}) => {\r\n    return( \r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Presupuesto: $ {presupuesto}\r\n            </div>\r\n            <div className={revisarPresupuesto(presupuesto, restante)}>\r\n                Restante: $ {restante}\r\n            </div>\r\n        </Fragment>\r\n     );\r\n}\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante: PropTypes.number.isRequired\r\n}\r\nexport default ControlPresupuesto;","import React, { useState, useEffect} from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\nfunction App() {\n  //definir el state\n  const [presupuesto, guardarPresupuesto] = useState(0);\n  const [restante, guardarRestante] = useState(0);\n  const [mostrarpregunta, actualizarPregunta] = useState(true);\n  const [gastos, guardarGastos] = useState([]);\n  const [gasto, guardarGasto] = useState({});\n  const [creargasto, guardarCrearGasto] = useState(false);\n\n  //UseEffect que actualiza el restante\n  useEffect(() =>{\n\n    //agregaael nuevo presupuesto\n    if(creargasto ) {\n      guardarGastos([\n        ...gastos,\n        gasto\n      ])\n\n      //resta del presupuesto actual\n      const presupuestoRestante = restante - gasto.cantidad;\n      guardarRestante(presupuestoRestante);\n\n      //resetear a false\n      guardarCrearGasto(false);\n    }\n  }, [gasto, creargasto, gastos, restante]);\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Gasto Semanal</h1>\n        <div className=\"contenido-principal contenido\">\n          \n          { mostrarpregunta ? //ternario, si mostraapregunta is true\n            ( \n              <Pregunta \n                guardarPresupuesto={guardarPresupuesto}\n                guardarRestante={guardarRestante}\n                actualizarPregunta={actualizarPregunta}\n              />\n            ) : //Si mostrar pregunta is false\n            (\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Formulario \n                    guardarGasto={guardarGasto}\n                    guardarCrearGasto={guardarCrearGasto}\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <Listado \n                    gastos={gastos}\n                  />\n                  <ControlPresupuesto \n                    presupuesto={presupuesto}\n                    restante={restante}\n                  />\n                </div>\n              </div>              \n            )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}